using System;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using GeneralToolkitLib.Converters;

namespace GeneralToolkitLib.Hashing
{
    public class ChecksumFileGenerator
    {
        private const string CHECKSUM_FILE_HEADER = "; Generated by {0} on {1} at {2} \n; http://www.cuplex.se\n;";
        private const string CHECKSUM_FILE_INFO = ";{0}  {1} {2} {3}";
        private readonly string _applicationName;
        private readonly IProgress<ChecksumProgress> _progress;
        private readonly ChecksumProgress _checksumProgress;

        public ChecksumFileGenerator(string applicationName, IProgress<ChecksumProgress> progress)
        {
            _applicationName = applicationName;
            _progress = progress;
            _checksumProgress = new ChecksumProgress();
        }

        public void GenrateSFVFileAsync(StringCollection filePathCollection, string sfvFilename)
        {
            new Task(() => GenrateSFVFile(filePathCollection, sfvFilename)).Start();
        }

        public void GenrateSFVFile(StringCollection filePathCollection, string sfvFilename)
        {
            using (var fs = File.Create(sfvFilename))
            {
                var CRC32HashImplemenation = new CRC32();

                // Write Header
                var sw = new StreamWriter(fs);
                sw.WriteLine(CHECKSUM_FILE_HEADER, _applicationName, DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("HH:mm:ss"));

                _checksumProgress.FilesTotal = filePathCollection.Count;
                _checksumProgress.Text = "Generating SFV file header";

                if (_progress != null)
                    _progress.Report(_checksumProgress);

                foreach (string filename in filePathCollection)
                {
                    var fileInfo = new FileInfo(filename);

                    if (!fileInfo.Exists)
                    {
                        _checksumProgress.FilesTotal = _checksumProgress.FilesTotal - 1;
                        continue;
                    }

                    sw.WriteLine(CHECKSUM_FILE_INFO, FormatFileSize(fileInfo.Length, 14), fileInfo.LastWriteTime.ToString("HH:mm:ss"), fileInfo.LastWriteTime.ToString("yyyy-MM-dd"), GeneralConverters.GetFileNameFromPath(filename));
                }

                foreach (string filename in filePathCollection)
                {
                    _checksumProgress.Text = "Processing file: " + filename;

                    if (_progress != null)
                        _progress.Report(_checksumProgress);

                    var fileInfo = new FileInfo(filename);

                    if (!fileInfo.Exists)
                        continue;
                    try
                    {
                        string hexChecksum = GeneralConverters.ByteArrayToHexString(CRC32HashImplemenation.ComputeHash(fileInfo.OpenRead()));
                        sw.WriteLine(GeneralConverters.GetFileNameFromPath(filename) + " " + hexChecksum);
                        _checksumProgress.DataRead = _checksumProgress.DataRead + fileInfo.Length;
                    }
                    catch (Exception ex)
                    {
                        _checksumProgress.Text = ex.Message;
                    }


                    _checksumProgress.FilesCompleted = _checksumProgress.FilesCompleted + 1;
                    _checksumProgress.TotalProgress = _checksumProgress.FilesCompleted * 100 / _checksumProgress.FilesTotal;

                    if (_progress != null)
                        _progress.Report(_checksumProgress);
                }

                fs.Flush();
                fs.Close();

                if (_progress != null)
                {
                    _checksumProgress.Text = "SFV file generation completed";
                    _checksumProgress.TotalProgress = 100;
                    _checksumProgress.Completed = true;
                    _progress.Report(_checksumProgress);
                }
            }
        }

        public void GenrateMD5FileAsync(StringCollection filePathCollection, string sfvFilename)
        {
            new Task(() => GenrateMD5File(filePathCollection, sfvFilename)).Start();
        }

        public void GenrateMD5File(StringCollection filePathCollection, string sfvFilename)
        {
            using (var fs = File.Create(sfvFilename))
            {
                var MD5HashImplemenation = new MD5();

                // Write Header
                var sw = new StreamWriter(fs);
                sw.WriteLine(CHECKSUM_FILE_HEADER, _applicationName, DateTime.Now.ToString("yyyy-MM-dd"), DateTime.Now.ToString("HH:mm:ss"));

                _checksumProgress.FilesTotal = filePathCollection.Count;
                _checksumProgress.Text = "Generating MD5 file header";

                if (_progress != null)
                    _progress.Report(_checksumProgress);

                foreach (string filename in filePathCollection)
                {
                    var fileInfo = new FileInfo(filename);

                    if (!fileInfo.Exists)
                    {
                        _checksumProgress.FilesTotal = _checksumProgress.FilesTotal - 1;
                        continue;
                    }

                    sw.WriteLine(CHECKSUM_FILE_INFO, FormatFileSize(fileInfo.Length, 14), fileInfo.LastWriteTime.ToString("HH:mm:ss"), fileInfo.LastWriteTime.ToString("yyyy-MM-dd"), GeneralConverters.GetFileNameFromPath(filename));
                }

                foreach (string filename in filePathCollection)
                {
                    _checksumProgress.Text = "Processing file: " + filename;

                    if (_progress != null)
                        _progress.Report(_checksumProgress);

                    var fileInfo = new FileInfo(filename);

                    if (!fileInfo.Exists)
                        continue;
                    try
                    {
                        string hexChecksum = GeneralConverters.ByteArrayToHexString(MD5HashImplemenation.ComputeHash(fileInfo.OpenRead()));
                        sw.WriteLine(hexChecksum + " *" + GeneralConverters.GetFileNameFromPath(filename));
                        _checksumProgress.DataRead = _checksumProgress.DataRead + fileInfo.Length;
                    }
                    catch (Exception ex)
                    {
                        _checksumProgress.Text = ex.Message;
                    }


                    _checksumProgress.FilesCompleted = _checksumProgress.FilesCompleted + 1;
                    _checksumProgress.TotalProgress = _checksumProgress.FilesCompleted * 100 / _checksumProgress.FilesTotal;

                    if (_progress != null)
                        _progress.Report(_checksumProgress);
                }

                sw.Flush();
                fs.Flush();
                fs.Close();

                if (_progress != null)
                {
                    _checksumProgress.Text = "MD5 file generation completed";
                    _checksumProgress.TotalProgress = 100;
                    _checksumProgress.Completed = true;
                    _progress.Report(_checksumProgress);
                }
            }
        }

        private string FormatFileSize(long fileSize, int strLen)
        {
            return fileSize.ToString(CultureInfo.InvariantCulture).PadLeft(strLen);
        }
    }
}